# version: 2.1

# orbs:
#   slack: circleci/slack@4.12.5
  
# commands:
# #   build-server:
# #    steps:
    
#   destroy-environment:
#     description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
#     parameters:
#       # Add parameter here  
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Destroy back-end stack
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name "udapeople-backend-<< parameters.workflow_id >>"
#       - run:
#           name: Destroy front-end stack
#           when: on_fail
#           command: |
#             aws cloudformation delete-stack --stack-name "udapeople-frontend-<< parameters.workflow_id >>"
#       - run:
#           name: Destroy S3 bucket
#           when: on_fail
#           command: |
#             aws s3 rm "s3://udapeople-<< parameters.workflow_id >>" --recursive

#   revert-migrations:
#     description: Revert the last migration if successfully run in the current workflow.
#     parameters:
#       # Add parameter here
#       workflow_id:
#         type: string
#     steps:
#       - run:
#           name: Revert migrations
#           # Add when this will run
#           when: on_fail
#           command: |
#             SUCCESS=$(curl --insecure  https://kvdb.io/RtoNXm8HmTA68PUcS34agT/migration_<< parameters.workflow_id >>)
#             SUCCESS = 1
#             if(( $SUCCESS==1 )); 
#             then
#               cd ~/project/backend
#               npm install
#               npm run migration:revert
#             fi
            
# jobs:
#   build-frontend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       # - restore_cache:
#       #     keys: [frontend-build]
#       - run: ls
#       - run: 
#           name: install npm dependences
#           command: |
#             cd frontend
#             npm install
#       - run: 
#           name: build front-end
#           command: |
#             cd frontend
#             npm run build
#       - save_cache:
#           paths: [frontend/node_modules]
#           key: frontend-build

#   build-backend:
#     docker:
#       - image: circleci/node:13.8.0
#     steps:
#       - checkout
#       # - restore_cache:
#       #     keys: [backend-build]
#       - run: 
#           name: install npm dependences
#           command: |
#             cd backend
#             npm install
#       - run: 
#           name: build back-end
#           command: |
#             cd backend
#             npm run build
#       - save_cache:
#           paths: [backend/node_modules]
#           key: backend-build

#   test-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [frontend-build]
#       # Your job code here
#       - run: 
#           name: install npm dependences
#           command: |
#             cd frontend
#             npm install
#       - run: 
#           name: test front-end
#           command: |
#             cd frontend
#             npm run test
                
#   test-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [backend-build]
#       # Your job code here
#       - run: 
#           name: install npm dependences
#           command: |
#             cd backend
#             npm install
#       - run: 
#           name: test back-end
#           command: |
#             cd backend
#             npm run test
            
#   scan-frontend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [frontend-build]
#       # Your job code here
#       - run: 
#           name: install npm dependences
#           command: |
#             cd frontend
#             npm install
#       - run: 
#           name: analyst security
#           command: |
#             cd frontend
#             npm audit fix --force --audit-level=critical
#             npm autit fix --force
#             npm audit --audit-level=critical

#   scan-backend:
#     docker:
#       # Docker image here
#       - image: circleci/node:13.8.0
#     steps:
#       # Checkout code from git
#       - checkout
#       # Restore from cache
#       - restore_cache:
#           keys: [backend-build]
#       # Your job code here
#       - run: 
#           name: install npm dependences
#           command: |
#             cd backend
#             npm install
#       - run: 
#           name: analyst security
#           command: |
#             cd backend
#             npm audit fix --force --audit-level=critical
#             npm autit fix --force
#             npm audit --audit-level=critical

#   deploy-infrastructure:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: install tar gzip
#           command: yum -y install tar gzip
#       - run:
#           name: Ensure back-end infrastructure exists
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/backend.yml \
#               --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople-${CIRCLE_WORKFLOW_ID:0:7}
#       - run:
#           name: Ensure front-end infrastructure exist
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/frontend.yml \
#               --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
#       - run:
#           name: Check backend ip
#           command: |
#             aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text
#       - run:
#           name: Add back-end ip to ansible inventory
#           command: |
#             aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text >> .circleci/ansible/inventory.txt
#       - run: cat .circleci/ansible/inventory.txt
#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/.circleci/ansible/inventory.txt
#       # Here's where you will add some code to rollback on failure
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   configure-infrastructure:
#     docker:
#       # Docker image here that supports Ansible
#       - image: python:3.7-alpine3.11
#     steps:
#       # Checkout code from git
#       - checkout
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints: ["6a:43:ab:b1:16:32:db:83:54:fb:1f:d3:f1:98:4b:17"]
#       # attach workspace
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update --no-cache ansible tar gzip openssh
#             pip install awscli
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Add SSH host to known
#           command: |
#             export SSH_HOST=$(aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text)
#             echo ${SSH_HOST}
#             ssh-keyscan -H ${SSH_HOST} >> ~/.ssh/known_hosts
#       - run: 
#           name: check inventory.txt file
#           command: |
#             pwd 
#             ls -l 
#             cat ~/project/.circleci/ansible/inventory.txt
#       - run:
#           name: Configure server
#           command: |
#             cd ~/project/.circleci/ansible 
#             ansible-playbook -i inventory.txt configure-server.yml
#       # Here's where you will add some code to rollback on failure 
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   run-migrations:
#     docker:
#       # Docker image here that supports NodeJS
#       - image: python:3.7-alpine3.16
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible tar gzip npm nodejs curl 
#             pip install awscli
#       - restore_cache:
#           keys: [backend-build]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Migration
#           command: |
#             cd backend
#             npm install
#             npm run migrations > migrations_dump.txt
#       - run:
#           name: Send migration results to kvdb.io
#           command: |
#             if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
#             then 
#               curl https://kvdb.io/RtoNXm8HmTA68PUcS34agT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
#             fi
#       # Here's where you will add some code to rollback on failure 
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   deploy-frontend:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: python:3.7-alpine3.16
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install libraries
#           command: |
#             apk add --update ansible tar gzip npm nodejs curl 
#             pip install awscli
#       - restore_cache:
#           keys: [frontend-build]
#       - run:
#           name: Deploy frontend
#           command: |
#             export BACKEND_IP=$(aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:project,Values=udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             echo API_URL="http://${BACKEND_IP}:3030" >> frontend/.env
#             cat frontend/.env
            
#             cd frontend
#             npm install
#             npm run build
#             aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
            
#       # aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
#       # Here's where you will add some code to rollback on failure
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"    
                    
#   deploy-backend:
#     docker:
#       # Docker image here that supports Ansible
#       - image: python:3.7-alpine3.16
#     steps:
#       # Checkout code from git
#       - checkout
#       - run:
#           name: Install libraries
#           command: |
#             apk add --update ansible tar gzip npm nodejs curl 
#             pip install awscli
#       # Add ssh keys with fingerprint
#       - add_ssh_keys:
#           fingerprints: ["6a:43:ab:b1:16:32:db:83:54:fb:1f:d3:f1:98:4b:17"]
#       # attach workspace
#       - attach_workspace:
#           at: ~/
#       - restore_cache:
#           keys: [backend-build]
#       - run:
#           name: Install dependency
#           command: |
#             cd backend
#             npm install
#       - run:
#           name: Deploy backend
#           command: |
#             cd backend
#             npm run build
#             cd ..
#             tar -C backend -czvf artifact.tar.gz .
#             cp artifact.tar.gz .circleci/ansible/roles/deploy/files

#             cd .circleci/ansible
#             echo "Contents  of the inventory.txt file is -------"
#             cat inventory.txt
#             ansible-playbook -i inventory.txt deploy-backend.yml

#       - persist_to_workspace:
#           root: ~/
#           paths:
#             - project/backend
#       # Here's where you will add some code to rollback on failure  
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       - revert-migrations:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   smoke-test:
#     docker:
#       # Lightweight Docker image 
#       - image: python:3.7-alpine3.16
#     steps:
#       # Checkout code from git
#       - checkout
#       - restore_cache:
#           keys: [backend-build]
#       - attach_workspace:
#           at: ~/
#       - run:
#           name: Install dependencies
#           command: |
#             apk add --update ansible tar gzip npm nodejs curl 
#             pip install awscli
#       - run:
#           name: Get backend url
#           command: |
#             export BACKEND_IP=$(aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#       - run:
#           name: Backend smoke test.
#           command: |
#             export BACKEND_IP=$(aws ec2 describe-instances \
#               --query 'Reservations[*].Instances[*].PublicIpAddress' \
#               --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --output text)
#             export API_URL="http://${BACKEND_IP}:3030"
#             echo "${API_URL}"
#             if curl "${API_URL}/api/status" | grep "ok"
#             then
#               return 0
#             else
#               return 1
#             fi
#       - run:
#           name: Frontend smoke test.
#           command: |
#             URL="http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website-us-east-1.amazonaws.com/#/employees"            
#             echo ${URL} 
#             if curl -s ${URL} | grep "Welcome"
#             then
#               return 0
#             else
#               return 1
#             fi
#       # Here's where you will add some code to rollback on failure  
#       # - destroy-environment:
#       #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"
#       # - revert-migrations:
#       #     workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}"

#   cloudfront-update:
#     docker:
#       # Docker image here that supports AWS CLI
#       - image: amazon/aws-cli
#     steps:
#       # Checkout code from git
#       - run:
#           name: Install dependencies
#           command: |
#             yum -y install tar gzip
#       - run:
#           name: Update cloudfront distribution
#           command: |
#             aws cloudformation deploy \
#               --template-file .circleci/files/cloudfront.yml \
#               --stack-name InitialStack \
#               --parameter-overrides WorkflowID="udapeople-${CIRCLE_WORKFLOW_ID:0:7}" \
#               --tags project=udapeople
#       # Here's where you will add some code to rollback on failure 
#       - destroy-environment:
#           workflow_id: "${CIRCLE_WORKFLOW_ID:0:7}" 

# # cleanup:
# #     docker:
# #       # Docker image here
# #     steps:
# #       # Checkout code from git
# #       - run:
# #           name: Get old stack workflow id
# #           command: |
# #             # your code here
# #             export OldWorkflowID="the id here"
# #             export STACKS=[] #put the list of stacks here
# #       - run:
# #           name: Remove old stacks and files
# #           command: |
# #             if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
# #             then
# #               # your code here
# #             fi
            
# workflows:
#   Udapeople:
#     jobs:
#       - build-frontend
#       - build-backend
#       # - test-frontend:
#       #     requires: 
#       #       - build-frontend
#       # - test-backend:
#       #     requires: 
#       #       - build-backend
#       # - scan-backend:
#       #     requires: 
#       #       - build-backend
#       # - scan-frontend:
#       #     requires: 
#       #       - build-frontend
#       - deploy-infrastructure:
#           requires: 
#             # - test-frontend
#             # - test-backend
#             - build-frontend
#             - build-backend
#       #       - scan-frontend
#       #       - scan-backend
#       #     filters:
#       #       branches:
#       #         only: [test-feature-branch]
#       - configure-infrastructure:
#           requires: 
#             - deploy-infrastructure
#       - run-migrations:
#           requires: 
#             - configure-infrastructure
#       - deploy-frontend:
#           requires: 
#             - run-migrations
#       - deploy-backend:
#           requires: 
#             - run-migrations
#       - smoke-test:
#           requires: 
#             - deploy-backend
#             - deploy-frontend
#       - cloudfront-update:
#           requires: 
#             - smoke-test
#       # - cleanup:
#       #     requires: [cloudfront-update]

version: 2.1

commands:
  install_awscli:
    description: Install AWS CLI v2
    steps:
      - run:
          name: Install AWS CLI v2
          command: |
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip awscliv2.zip
            sudo ./aws/install
  install_ansible:
    description: Install Ansible
    steps:
      - run:
          name: Install Ansible
          command: |
            sudo apt update
            sudo apt install software-properties-common -y
            sudo add-apt-repository --yes --update ppa:ansible/ansible
            sudo apt install ansible -y
  install_nodejs:
    description: Install Node.js 13
    steps:
      - run:
          name: Install Node.js 13
          command: |
            curl -fsSL https://deb.nodesource.com/setup_13.x | sudo -E bash -
            sudo apt install -y nodejs
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            aws cloudformation delete-stack --stack-name udapeople-backend-<< parameters.Workflow_ID >>
            aws s3 rm s3://udapeople-<<parameters.Workflow_ID>> --recursive
            aws cloudformation delete-stack --stack-name udapeople-frontend-<< parameters.Workflow_ID >>
  revert-migrations:
    description: Revert the last migration
    parameters:
      Workflow_ID:
        type: string
        default: ${CIRCLE_WORKFLOW_ID:0:7}
    steps:
      - run:
          name: Revert migrations
          when: on_fail
          command: |
            SUCCESS=$(curl --insecure  https://kvdb.io/RtoNXm8HmTA68PUcS34agT/migration_<< parameters.Workflow_ID >>)
            # Logic for reverting the database state
            if (( $SUCCESS == 1 ));
            then
              cd ~/project/backend
              npm install
              npm run migration:revert
            fi
jobs:
  build-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-deps
  build-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-deps
  test-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Unit Test
          command: |
            cd frontend
            npm install
            npm test
  test-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Unit Test
          command: |
            cd backend
            npm install
            npm test
  scan-frontend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Front-end Scan
          command: |
            cd frontend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  scan-backend:
    docker:
      - image: cimg/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Back-end Scan
          command: |
            cd backend
            npm install
            npm audit fix --force --audit-level=critical
            npm audit fix --force --audit-level=critical
            npm audit --audit-level=critical
  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      # - install_awscli
      - run:
          name: install tar gzip
          command: yum -y install tar gzip
      - run:
          name: Ensure back-end infrastructure exists
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Ensure front-end infrastructure exist
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/frontend.yml \
            --tags project=udapeople \
            --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"
      - run:
          name: Add back-end ip to ansible inventory
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
            --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --query 'Reservations[*].Instances[*].PublicIpAddress' \
            --output text)
            echo $BACKEND_PUBLIC_IP >> .circleci/ansible/inventory.txt
            echo $BACKEND_PUBLIC_IP
            cat .circleci/ansible/inventory.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - project/.circleci/ansible/inventory.txt
      
      - destroy-environment

  configure-infrastructure:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - add_ssh_keys:
          fingerprints: ["6a:43:ab:b1:16:32:db:83:54:fb:1f:d3:f1:98:4b:17"]
      - attach_workspace:
          at: ~/
      - run:
          name: Configure Server
          command: |
            echo ENVIRONMENT=production >> backend/.env
            echo TYPEORM_CONNECTION=$TYPEORM_CONNECTION >> backend/.env
            echo TYPEORM_ENTITIES=$TYPEORM_ENTITIES >> backend/.env
            echo TYPEORM_HOST=$TYPEORM_HOST >> backend/.env
            echo TYPEORM_PORT=$TYPEORM_PORT >> backend/.env
            echo TYPEORM_USERNAME=$TYPEORM_USERNAME >> backend/.env
            echo TYPEORM_PASSWORD=$TYPEORM_PASSWORD >> backend/.env
            echo TYPEORM_DATABASE=$TYPEORM_DATABASE >> backend/.env
            echo TYPEORM_MIGRATIONS=$TYPEORM_MIGRATIONS >> backend/.env
            echo TYPEORM_MIGRATIONS_DIR=$TYPEORM_MIGRATIONS_DIR >> backend/.env
            cat backend/.env
            
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt configure-server.yml
      - persist_to_workspace:
          root: ~/
          paths:
            - "project/backend"
      - destroy-environment

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: python:3.7-alpine3.16
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Install dependencies
          command: |
            apk add --update ansible tar gzip npm nodejs curl 
            pip install awscli
      - run:
          name: Migration
          command: |
            cd backend
            npm install
            npm run migrations > migrations_dump.txt
            cat migrations_dump.txt
      - run:
          name: Send migration results to kvdb.io
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt 
            then 
              curl https://kvdb.io/RtoNXm8HmTA68PUcS34agT/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
            fi
      # Here's where you will add some code to rollback on failure 
      - destroy-environment
      - revert-migrations
  deploy-frontend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - restore_cache:
          keys: [frontend-deps]
      - run:
          name: Install dependencies
          command: |
            cd frontend
            npm install
      - run:
          name: Get backend url
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            echo "API_URL=http://${BACKEND_PUBLIC_IP}:3030" >> frontend/.env
            cat frontend/.env
      - run:
          name: Deploy frontend objects
          command: |
            cd frontend
            npm run build
            aws s3 cp dist s3://udapeople-${CIRCLE_WORKFLOW_ID:0:7} --recursive
      - destroy-environment
      - revert-migrations
  deploy-backend:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_ansible
      - install_nodejs
      - add_ssh_keys:
          fingerprints: ["6a:43:ab:b1:16:32:db:83:54:fb:1f:d3:f1:98:4b:17"]
      - attach_workspace:
          at: ~/
      - restore_cache:
          keys: [backend-deps]
      - run:
          name: Install dependencies
          command: |
            cd backend
            npm install
      - run:
          name: Package Backend
          command: |
            cd backend
            npm run build
            tar -czf artifact.tar.gz dist/* package*
            cd ..
            cp backend/artifact.tar.gz .circleci/ansible/roles/deploy/files
            echo export
      - run:
          name: Deploy backend
          command: |
            export TYPEORM_MIGRATIONS_DIR=./migrations
            export TYPEORM_ENTITIES=./modules/domain/**/*.entity{.ts,.js}
            export TYPEORM_MIGRATIONS=./migrations/*.ts
            cd .circleci/ansible
            cat inventory.txt
            ansible-playbook -i inventory.txt deploy-backend.yml
      - destroy-environment
      - revert-migrations

  smoke-test:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Frontend smoke test.
          command: |
            FRONTEND_WEBSITE=http://udapeople-${CIRCLE_WORKFLOW_ID:0:7}.s3-website.${AWS_DEFAULT_REGION}.amazonaws.com
            if curl -s $FRONTEND_WEBSITE | grep "Welcome"
            then
              exit 0
            else
              exit 1
            fi
      - run:
          name: Backend smoke test.
          command: |
            BACKEND_PUBLIC_IP=$(aws ec2 describe-instances \
              --filters "Name=tag:aws:cloudformation:stack-name,Values=udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
              --query 'Reservations[*].Instances[*].PublicIpAddress' \
              --output text)
            export API_URL=http://${BACKEND_PUBLIC_IP}:3030
            if curl -s $API_URL/api/status | grep "ok"
            then
              exit 0
            else
              exit 1
            fi
      - destroy-environment
      - revert-migrations

  cloudfront-update:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Save Old Workflow ID to kvdb.io
          command: |
            export OLD_WORKFLOW_ID=$(aws cloudformation \
                      list-exports --query "Exports[?Name==\`WorkflowID\`].Value" \
                      --no-paginate --output text)
            echo "Old Wokflow ID: $OLD_WORKFLOW_ID"
            curl https://kvdb.io/${KVDB_BUCKET}/old_workflow_id -d "${OLD_WORKFLOW_ID}"
      - run:
          name: Update cloudfront distribution
          command: |
            aws cloudformation deploy \
              --template-file .circleci/files/cloudfront.yml \
              --parameter-overrides WorkflowID="${CIRCLE_WORKFLOW_ID:0:7}" \
              --stack-name InitialStack
      - destroy-environment
      - revert-migrations
  cleanup:
    docker:
      - image: cimg/base:stable
    steps:
      - checkout
      - install_awscli
      - install_nodejs
      - run:
          name: Remove old stacks and files
          command: |
            export STACKS=($(aws cloudformation list-stacks \
                --query "StackSummaries[*].StackName" \
                --stack-status-filter CREATE_COMPLETE --no-paginate --output text)) 
            echo Stack names: "${STACKS[@]}"
            export OldWorkflowID=$(curl --insecure https://kvdb.io/${KVDB_BUCKET}/old_workflow_id)
            echo Old Workflow ID: $OldWorkflowID 
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              aws s3 rm "s3://udapeople-${OldWorkflowID}" --recursive
              aws cloudformation delete-stack --stack-name "udapeople-backend-${OldWorkflowID}"
              aws cloudformation delete-stack --stack-name "udapeople-frontend-${OldWorkflowID}"
            fi
workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      - deploy-infrastructure
          # requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          # filters:
          #   branches:
          #     only: [master]
      - configure-infrastructure:
          requires: [deploy-infrastructure]
      - run-migrations:
          requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test:
          requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]