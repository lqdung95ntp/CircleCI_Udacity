# Use the latest 2.1 version of CircleCI pipeline process engine. See: https://circleci.com/docs/2.0/configuration-reference
version: 2.1
# Use a package of configuration called an orb.
orbs:
  # Declare a dependency on the welcome-orb
  # welcome: circleci/welcome-orb@0.4.1
  aws-cli: circleci/aws-cli@2.0.3

commands:
  print_pipeline_id:
    steps:
      - run: echo ${CIRCLE_WORKFLOW_ID}
  test_on_fail:
    steps:
      - run: return 1
      - run: 
          name: "test on fail job"
          command: "echo Job failed, on_fail is executed"
          when: on_fail
  destroy_env:
    steps:
      - run: 
          name: destroy environment
          command: aws cloudformation delete-stack --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7}
          when: on_fail
jobs:
  print_hello:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo Hello
  print_world:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo World << pipeline.git.branch >>
  test_env_var_build:
    docker:
      - image: cimg/base:2020.01
    steps:
      - checkout
      - run:
          name: "echo environment variables"
          command: echo $MY_ENV_VAR
  save_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - run: echo "Hello World" > ~/output.txt
      - persist_to_workspace:
          root: ~/
          paths:
            - output.txt
  print_object:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - print_pipeline_id
  cat_hello_world_output:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - attach_workspace:
          at: ~/
      - run: cat ~/output.txt
  test_on_fail_job:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - test_on_fail
  create_infrastructure:
      docker:
        - image: amazon/aws-cli
      steps:
        - checkout
        - run: 
            name: Create Cloudformation Stack 
            command: |
              aws cloudformation deploy --template-file template.yml --stack-name myStack-${CIRCLE_WORKFLOW_ID:0:7} --region us-east-1
        - run:
            name: simulate fail
            command: return 1
        - destroy_env
  config_infrastructure:
    docker:
      - image: python:3.7-alpine3.11
    steps:
      - checkout
      - add_ssh_keys:
          fingerprints: ["6a:43:ab:b1:16:32:db:83:54:fb:1f:d3:f1:98:4b:17"]
      # - run:
      #     name: install ssh-key
      #     command:
      #       sudo apt-get install openssh-server |
      #       ssh-agent bash |
      #       ssh-add ~/.ssh/id_rsa
      - run:
          name: Install Ansible
          command: apk add --update ansible
      - run:
          name: Execute Ansible Playbook
          command: ansible-playbook -i inventory main.yml
  
  smoke_test:
    docker:
      - image: alpine:latest
    steps:
      - run: apk add --update curl
      - run:
          name: smoke test
          command: |
            URL="https://blog.udacity.com/"
            # Test if website exists
            if curl -s --head ${URL} 
            then
              return 0
            else
              return 1
            fi
      - run:
          name: simulate error
          command: return 1
      - destroy_env
  
  create_and_deploy_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
         name: Execute bucket.yml - Create Cloudformation Stack
         command: |
           aws cloudformation deploy \
           --template-file bucket.yml \
           --stack-name stack-create-bucket-${CIRCLE_WORKFLOW_ID:0:7} \
           --parameter-overrides MyBucketName="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"
      # Uncomment the step below if yoou wish to upload all contents of the current directory to the S3 bucket
      - run: aws s3 sync . s3://mybucket-${CIRCLE_WORKFLOW_ID:0:7} --delete
  # Fetch and save the pipeline ID (bucket ID) responsible for the last release.

  get_last_deployment_id:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - run:
          name: Fetch and save the old pipeline ID (bucket name) responsible for the last release.
          command: |
            aws cloudformation \
            list-exports --query "Exports[?Name==\`PipelineID\`].Value" \
            --no-paginate --output text > ~/textfile.txt
      - persist_to_workspace:
          root: ~/
          paths: 
            - textfile.txt 

  promote_to_production:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Execute cloudfront.yml
          command: |
            aws cloudformation deploy \
            --template-file cloudfront.yml \
            --stack-name production-distro \
            --parameter-overrides PipelineID="mybucket-${CIRCLE_WORKFLOW_ID:0:7}"

  clean_up_old_front_end:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run: yum install -y tar gzip
      - attach_workspace:
          at: ~/
      - run:
          name: Destroy the previous S3 bucket and CloudFormation stack. 
          # Use $OldBucketID environment variable or mybucket644752792305 below.
          # Similarly, you can create and use $OldStackID environment variable in place of production-distro 
          command: |
            export OldBucketID=$(cat ~/textfile.txt)
            aws s3 rm "s3://${OldBucketID}" --recursive
workflows:
  # welcome:
  #   jobs:
  #     - welcome/run
  #     - print_hello
  #     - print_world:
  #         requires:
  #           - print_hello
  # test_env_var:
  #   jobs:
  #     - test_env_var_build
  # test_read_output_file:
  #   jobs:
  #     - save_hello_world_output
  #     - cat_hello_world_output:
  #         requires:
  #           - save_hello_world_output
  # test_print_using_command:
  #   jobs:
  #     - print_object
  # test_on_fail_workflow:
  #   jobs:
  #     - test_on_fail_job
  myAWS_IaaC:
      jobs:
        # - create_infrastructure
        # - config_infrastructure
        # - smoke_test:
        #     requires:
        #       - create_infrastructure
        - create_and_deploy_front_end
        - promote_to_production:
            requires: 
              - create_and_deploy_front_end
        - get_last_deployment_id
        - clean_up_old_front_end:
            requires:
              - get_last_deployment_id
              - promote_to_production
    